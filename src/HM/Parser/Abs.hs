-- File generated by the BNF Converter (bnfc 2.9.5).

{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric #-}

-- | The abstract syntax of language Parser.

module HM.Parser.Abs where

import Prelude (Integer)
import qualified Prelude as C (Eq, Ord, Show, Read)

import qualified Data.Data    as C (Data, Typeable)
import qualified GHC.Generics as C (Generic)

data Command = CommandCheck TypedExp | CommandEval Exp
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data TypedExp = TypedExp Exp Type
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data Exp
    = ETrue
    | EFalse
    | ENat Integer
    | EAdd Exp Exp
    | ESub Exp Exp
    | EIf Exp Exp Exp
    | EIsZero Exp
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)

data Type = TNat | TBool
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Data, C.Typeable, C.Generic)


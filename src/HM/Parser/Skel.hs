-- File generated by the BNF Converter (bnfc 2.9.5).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module HM.Parser.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified HM.Parser.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: HM.Parser.Abs.Ident -> Result
transIdent x = case x of
  HM.Parser.Abs.Ident string -> failure x

transUVarIdent :: HM.Parser.Abs.UVarIdent -> Result
transUVarIdent x = case x of
  HM.Parser.Abs.UVarIdent string -> failure x

transPattern :: HM.Parser.Abs.Pattern -> Result
transPattern x = case x of
  HM.Parser.Abs.PatternVar ident -> failure x

transTerm :: HM.Parser.Abs.Term -> Result
transTerm x = case x of
  HM.Parser.Abs.EVar ident -> failure x
  HM.Parser.Abs.ETrue -> failure x
  HM.Parser.Abs.EFalse -> failure x
  HM.Parser.Abs.ENat integer -> failure x
  HM.Parser.Abs.EAdd term1 term2 -> failure x
  HM.Parser.Abs.ESub term1 term2 -> failure x
  HM.Parser.Abs.EIf term1 term2 term3 -> failure x
  HM.Parser.Abs.EIsZero term -> failure x
  HM.Parser.Abs.ETyped term1 term2 -> failure x
  HM.Parser.Abs.ELet pattern_ term scopedterm -> failure x
  HM.Parser.Abs.EAbs pattern_ term scopedterm -> failure x
  HM.Parser.Abs.EApp term1 term2 -> failure x
  HM.Parser.Abs.ETAbs pattern_ scopedterm -> failure x
  HM.Parser.Abs.ETApp term1 term2 -> failure x
  HM.Parser.Abs.EFor pattern_ term1 term2 scopedterm -> failure x
  HM.Parser.Abs.TUVar uvarident -> failure x
  HM.Parser.Abs.TNat -> failure x
  HM.Parser.Abs.TBool -> failure x
  HM.Parser.Abs.TArrow term1 term2 -> failure x
  HM.Parser.Abs.TVar ident -> failure x
  HM.Parser.Abs.TForAll pattern_ scopedterm -> failure x

transScopedTerm :: HM.Parser.Abs.ScopedTerm -> Result
transScopedTerm x = case x of
  HM.Parser.Abs.ScopedTerm term -> failure x

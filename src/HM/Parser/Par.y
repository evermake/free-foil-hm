-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.5).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module HM.Parser.Par
  ( happyError
  , myLexer
  , pPattern
  , pExp3
  , pExp2
  , pExp1
  , pExp
  , pScopedExp
  , pType
  , pScopedType
  , pTerm
  , pScopedTerm
  ) where

import Prelude

import qualified HM.Parser.Abs
import HM.Parser.Lex

}

%name pPattern Pattern
%name pExp3 Exp3
%name pExp2 Exp2
%name pExp1 Exp1
%name pExp Exp
%name pScopedExp ScopedExp
%name pType Type
%name pScopedType ScopedType
%name pTerm Term
%name pScopedTerm ScopedTerm
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '('         { PT _ (TS _ 1)         }
  ')'         { PT _ (TS _ 2)         }
  '+'         { PT _ (TS _ 3)         }
  '-'         { PT _ (TS _ 4)         }
  '->'        { PT _ (TS _ 5)         }
  '.'         { PT _ (TS _ 6)         }
  '..'        { PT _ (TS _ 7)         }
  ':'         { PT _ (TS _ 8)         }
  '='         { PT _ (TS _ 9)         }
  'Bool'      { PT _ (TS _ 10)        }
  'Nat'       { PT _ (TS _ 11)        }
  '['         { PT _ (TS _ 12)        }
  ']'         { PT _ (TS _ 13)        }
  'do'        { PT _ (TS _ 14)        }
  'else'      { PT _ (TS _ 15)        }
  'false'     { PT _ (TS _ 16)        }
  'for'       { PT _ (TS _ 17)        }
  'forall'    { PT _ (TS _ 18)        }
  'if'        { PT _ (TS _ 19)        }
  'in'        { PT _ (TS _ 20)        }
  'iszero'    { PT _ (TS _ 21)        }
  'let'       { PT _ (TS _ 22)        }
  'then'      { PT _ (TS _ 23)        }
  'true'      { PT _ (TS _ 24)        }
  'Λ'         { PT _ (TS _ 25)        }
  'λ'         { PT _ (TS _ 26)        }
  L_Ident     { PT _ (TV $$)          }
  L_integ     { PT _ (TI $$)          }
  L_UVarIdent { PT _ (T_UVarIdent $$) }

%%

Ident :: { HM.Parser.Abs.Ident }
Ident  : L_Ident { HM.Parser.Abs.Ident $1 }

Integer :: { Integer }
Integer  : L_integ  { (read $1) :: Integer }

UVarIdent :: { HM.Parser.Abs.UVarIdent }
UVarIdent  : L_UVarIdent { HM.Parser.Abs.UVarIdent $1 }

Pattern :: { HM.Parser.Abs.Pattern }
Pattern : Ident { HM.Parser.Abs.PatternVar $1 }

Exp3 :: { HM.Parser.Abs.Exp }
Exp3
  : Ident { HM.Parser.Abs.EVar $1 }
  | 'true' { HM.Parser.Abs.ETrue }
  | 'false' { HM.Parser.Abs.EFalse }
  | Integer { HM.Parser.Abs.ENat $1 }
  | '(' Exp ')' { $2 }

Exp2 :: { HM.Parser.Abs.Exp }
Exp2
  : Exp2 '+' Exp3 { HM.Parser.Abs.EAdd $1 $3 }
  | Exp2 '-' Exp3 { HM.Parser.Abs.ESub $1 $3 }
  | 'iszero' '(' Exp ')' { HM.Parser.Abs.EIsZero $3 }
  | Exp3 { $1 }

Exp1 :: { HM.Parser.Abs.Exp }
Exp1
  : 'if' Exp1 'then' Exp1 'else' Exp1 { HM.Parser.Abs.EIf $2 $4 $6 }
  | 'let' Pattern '=' Exp1 'in' ScopedExp { HM.Parser.Abs.ELet $2 $4 $6 }
  | 'λ' Pattern ':' Type '.' ScopedExp { HM.Parser.Abs.EAbs $2 $4 $6 }
  | Exp1 Exp2 { HM.Parser.Abs.EApp $1 $2 }
  | 'Λ' Pattern '.' ScopedExp { HM.Parser.Abs.ETAbs $2 $4 }
  | Exp1 '[' Type ']' { HM.Parser.Abs.ETApp $1 $3 }
  | 'for' Pattern 'in' '[' Exp1 '..' Exp1 ']' 'do' ScopedExp { HM.Parser.Abs.EFor $2 $5 $7 $10 }
  | Exp2 { $1 }

Exp :: { HM.Parser.Abs.Exp }
Exp : Exp1 ':' Type { HM.Parser.Abs.ETyped $1 $3 } | Exp1 { $1 }

ScopedExp :: { HM.Parser.Abs.ScopedExp }
ScopedExp : Exp1 { HM.Parser.Abs.ScopedExp $1 }

Type :: { HM.Parser.Abs.Type }
Type
  : UVarIdent { HM.Parser.Abs.TUVar $1 }
  | 'Nat' { HM.Parser.Abs.TNat }
  | 'Bool' { HM.Parser.Abs.TBool }
  | Type '->' Type { HM.Parser.Abs.TArrow $1 $3 }
  | Ident { HM.Parser.Abs.TVar $1 }
  | 'forall' Pattern '.' ScopedType { HM.Parser.Abs.TForAll $2 $4 }

ScopedType :: { HM.Parser.Abs.ScopedType }
ScopedType : Type { HM.Parser.Abs.ScopedType $1 }

Term :: { HM.Parser.Abs.Term }
Term
  : Exp1 { HM.Parser.Abs.TermExp1 $1 }
  | Type { HM.Parser.Abs.TermType $1 }

ScopedTerm :: { HM.Parser.Abs.ScopedTerm }
ScopedTerm : Term { HM.Parser.Abs.ScopedTerm $1 }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

}


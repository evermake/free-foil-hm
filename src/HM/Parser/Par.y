-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.5).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module HM.Parser.Par
  ( happyError
  , myLexer
  , pExp3
  , pExp2
  , pExp1
  , pExp
  , pType
  ) where

import Prelude

import qualified HM.Parser.Abs
import HM.Parser.Lex

}

%name pExp3 Exp3
%name pExp2 Exp2
%name pExp1 Exp1
%name pExp Exp
%name pType Type
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '('      { PT _ (TS _ 1)  }
  ')'      { PT _ (TS _ 2)  }
  '+'      { PT _ (TS _ 3)  }
  '-'      { PT _ (TS _ 4)  }
  ':'      { PT _ (TS _ 5)  }
  'Bool'   { PT _ (TS _ 6)  }
  'Nat'    { PT _ (TS _ 7)  }
  'else'   { PT _ (TS _ 8)  }
  'false'  { PT _ (TS _ 9)  }
  'if'     { PT _ (TS _ 10) }
  'iszero' { PT _ (TS _ 11) }
  'then'   { PT _ (TS _ 12) }
  'true'   { PT _ (TS _ 13) }
  L_integ  { PT _ (TI $$)   }

%%

Integer :: { Integer }
Integer  : L_integ  { (read $1) :: Integer }

Exp3 :: { HM.Parser.Abs.Exp }
Exp3
  : 'true' { HM.Parser.Abs.ETrue }
  | 'false' { HM.Parser.Abs.EFalse }
  | Integer { HM.Parser.Abs.ENat $1 }
  | '(' Exp ')' { $2 }

Exp2 :: { HM.Parser.Abs.Exp }
Exp2
  : Exp2 '+' Exp3 { HM.Parser.Abs.EAdd $1 $3 }
  | Exp2 '-' Exp3 { HM.Parser.Abs.ESub $1 $3 }
  | 'iszero' '(' Exp ')' { HM.Parser.Abs.EIsZero $3 }
  | Exp3 { $1 }

Exp1 :: { HM.Parser.Abs.Exp }
Exp1
  : 'if' Exp1 'then' Exp1 'else' Exp1 { HM.Parser.Abs.EIf $2 $4 $6 }
  | Exp2 { $1 }

Exp :: { HM.Parser.Abs.Exp }
Exp : Exp1 ':' Type { HM.Parser.Abs.ETyped $1 $3 } | Exp1 { $1 }

Type :: { HM.Parser.Abs.Type }
Type
  : 'Nat' { HM.Parser.Abs.TNat } | 'Bool' { HM.Parser.Abs.TBool }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

}


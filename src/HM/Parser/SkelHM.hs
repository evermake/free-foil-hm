-- File generated by the BNF Converter (bnfc 2.9.5).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module HM.Parser.SkelHM where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified HM.Parser.AbsHM

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transExp :: HM.Parser.AbsHM.Exp -> Result
transExp x = case x of
  HM.Parser.AbsHM.ETrue -> failure x
  HM.Parser.AbsHM.EFalse -> failure x
  HM.Parser.AbsHM.ENat integer -> failure x
  HM.Parser.AbsHM.EAdd exp1 exp2 -> failure x
  HM.Parser.AbsHM.ESub exp1 exp2 -> failure x
  HM.Parser.AbsHM.EIf exp1 exp2 exp3 -> failure x
  HM.Parser.AbsHM.EIsZero exp -> failure x
